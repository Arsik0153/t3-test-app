/* eslint-disable @typescript-eslint/no-misused-promises */
import { type NextPage } from "next";
import Head from "next/head";
import { z } from "zod";
import { type SubmitHandler, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import Header from "~/components/Header";
import { api } from "~/utils/api";
import { useRouter } from "next/router";

const formSchema = z.object({
  title: z.string().min(10, 'Title must be at least 10 characters').max(100, 'Title is too long'),
  content: z.string().min(20, 'Content must be at least 20 characters').max(1000, 'Content is too long'),
})

type FormSchemaType = z.infer<typeof formSchema>;

const New: NextPage = () => {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<FormSchemaType>({
    resolver: zodResolver(formSchema),
  });
  const router = useRouter();

  const createPost = api.post.create.useMutation({
    onSuccess: () => {
      void refetch();
      void router.push("/");
    }
  });
  const { refetch } = api.post.getAll.useQuery();

  const onSubmit: SubmitHandler<FormSchemaType> = (data) => {
    createPost.mutate(data);
  };

  return (
    <>
      <Head>
        <title>New post</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-gray-50">
        <Header />

        <div className="max-w-screen-lg w-full mx-auto">
          <form onSubmit={handleSubmit(onSubmit)} className="flex flex-col max-w-xl border border-gray-200 rounded-lg bg-white shadow-md mx-auto mt-16 py-6 px-8">
            <h1 className="font-bold text-xl mb-3">Create new post</h1>

            <label htmlFor="title" className="text-sm mt-3 mb-1">Title</label>
            <input type="text" id="title" className="border bg-slate-50 border-gray-200 rounded-md px-3 py-2 focus:border-gray-400 outline-none" placeholder="Enter title here" {...register('title')} />
            {errors.title && (
              <span className="text-red-800 block mt-1 text-sm">
                {errors.title?.message}
              </span>
            )}

            <label htmlFor="content" className="text-sm mt-3 mb-1">Content</label>
            <textarea id="content" className="border bg-slate-50 border-gray-200 rounded-md px-3 py-2 focus:border-gray-400 outline-none" placeholder="Enter title here" rows={7} {...register('content')} />
            {errors.content && (
              <span className="text-red-800 block mt-1 text-sm">
                {errors.content?.message}
              </span>
            )}

            <button type="submit" disabled={isSubmitting} className="w-48 mt-3 bg-slate-700 text-white py-2 rounded-md hover:bg-slate-600">
              <span className="text-xl mr-2 h-fit leading-none">+</span>
              Submit
            </button>
          </form>
        </div>
      </main>
    </>
  );
};

export default New;
